{"version":3,"sources":["config/Fire.js","Home.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","props","logout","bind","auth","signOut","Component","Login","login","handleChange","signup","state","email","password","e","this","setState","target","name","value","preventDefault","signInWithEmailAndPassword","then","u","catch","error","console","log","createUserWithEmailAndPassword","className","class","for","onChange","type","id","aria-describedby","placeholder","onClick","style","marginLeft","App","user","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8RAaeA,E,OADFC,EAASC,cAVC,CACnBC,OAAQ,0CACRC,WAAY,8CACZC,YAAa,qDACbC,UAAW,8BACXC,cAAe,0CACfC,kBAAmB,eACnBC,MAAO,8CCgBIC,E,kDArBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,OAAS,EAAKA,OAAOC,KAAZ,gBAFC,E,qDAOfb,EAAKc,OAAOC,Y,+BAIZ,OACI,6BACI,6C,GAdGC,a,QCoDJC,E,kDAnDb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,EAAKA,MAAML,KAAX,gBACb,EAAKM,aAAe,EAAKA,aAAaN,KAAlB,gBACpB,EAAKO,OAAS,EAAKA,OAAOP,KAAZ,gBACd,EAAKQ,MAAQ,CACXC,MAAO,GACPC,SAAU,IAPK,E,yDAWNC,GACXC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,4BAGtCL,GACJA,EAAEM,iBACF9B,EAAKc,OAAOiB,2BAA2BN,KAAKJ,MAAMC,MAAOG,KAAKJ,MAAME,UAAUS,MAAK,SAACC,OACjFC,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,6BAIXX,GACLA,EAAEM,iBACF9B,EAAKc,OAAOwB,+BAA+Bb,KAAKJ,MAAMC,MAAOG,KAAKJ,MAAME,UAAUS,MAAK,SAACC,OACrFD,MAAK,SAACC,GAAKG,QAAQC,IAAIJ,MACzBC,OAAM,SAACC,GACJC,QAAQC,IAAIF,Q,+BAIhB,OACG,yBAAKI,UAAU,YACf,8BACD,yBAAKC,MAAM,cACV,2BAAOC,IAAI,sBAAX,iBACA,2BAAOZ,MAAOJ,KAAKJ,MAAMC,MAAOoB,SAAUjB,KAAKN,aAAcwB,KAAK,QAAQf,KAAK,QAAQY,MAAM,eAAeI,GAAG,qBAAqBC,mBAAiB,YAAYC,YAAY,iBAE7K,yBAAKN,MAAM,cACZ,2BAAOC,IAAI,yBAAX,YACA,2BAAOZ,MAAOJ,KAAKJ,MAAME,SAAUmB,SAAUjB,KAAKN,aAAcwB,KAAK,WAAWf,KAAK,WAAWY,MAAM,eAAeI,GAAG,wBAAwBE,YAAY,cAE5J,4BAAQH,KAAK,SAASI,QAAStB,KAAKP,MAAOsB,MAAM,mBAAjD,SACA,4BAAQO,QAAStB,KAAKL,OAAQ4B,MAAO,CAACC,WAAY,QAASV,UAAU,mBAArE,gB,GA7CcvB,aCmCJkC,E,kDA/Bd,aAAe,IAAD,8BACZ,gBACK7B,MAAS,CACZ8B,KAAM,MAER,EAAKC,aAAe,EAAKA,aAAavC,KAAlB,gBALR,E,gEASZY,KAAK2B,iB,qCAGS,IAAD,OACbpD,EAAKc,OAAOuC,oBAAmB,SAACF,GAC9Bf,QAAQC,IAAIc,GACRA,EACF,EAAKzB,SAAS,CAAEyB,SAEhB,EAAKzB,SAAS,CAAEyB,KAAM,Y,+BAK1B,OACC,yBAAKZ,UAAU,OACbd,KAAKJ,MAAM8B,KAAQ,kBAAC,EAAD,MAAa,kBAAC,EAAD,W,GA1BrBnC,aCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMkC,c","file":"static/js/main.18f91f5e.chunk.js","sourcesContent":["import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA7VMXlpVgBUT8C9dCepe6JCsp1zEDyEek\",\n    authDomain: \"arl-gamified-training-2767b.firebaseapp.com\",\n    databaseURL: \"https://arl-gamified-training-2767b.firebaseio.com\",\n    projectId: \"arl-gamified-training-2767b\",\n    storageBucket: \"arl-gamified-training-2767b.appspot.com\",\n    messagingSenderId: \"695207976540\",\n    appId: \"1:695207976540:web:55070284fb165ed11dd099\"\n};\n\nconst fire = firebase.initializeApp(firebaseConfig);\nexport default fire; \n","import React, { Component } from 'react';\nimport fire from './config/Fire';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.logout = this.logout.bind(this);\n    }\n\n\n    logout() {\n        fire.auth().signOut();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Homepage</h1>\n            </div>\n        );\n\n    }\n\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport fire from './config/Fire';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.signup = this.signup.bind(this);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  login(e) {\n    e.preventDefault();\n    fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).catch((error) => {\n        console.log(error);\n      });\n  }\n\n  signup(e){\n    e.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u)=>{\n    }).then((u)=>{console.log(u)})\n    .catch((error) => {\n        console.log(error);\n      })\n  }\n  render() {\n    return (\n       <div className=\"col-md-6\">\n       <form>\n      <div class=\"form-group\">\n       <label for=\"exampleInputEmail1\">Email address</label>\n       <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\n      </div>\n       <div class=\"form-group\">\n      <label for=\"exampleInputPassword1\">Password</label>\n      <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\n      </div>\n      <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\n      <button onClick={this.signup} style={{marginLeft: '25px'}} className=\"btn btn-success\">Signup</button>\n </form>\n \n </div>\n    );\n  }\n}\nexport default Login;","import React, { Component } from 'react';\nimport './App.css';\nimport fire from './config/Fire';\nimport Home from './Home';\nimport Login from './Login';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener() {\n    fire.auth().onAuthStateChanged((user) => {\n      console.log(user);\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n  render() {\n    return (\n     <div className=\"App\">\n      {this.state.user ? (<Home />) : (<Login />)}\n     </div>\n    );\n  }\n}\n\n export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}